// DOM stuff
let container = document.getElementById("container"),
    shapeName_dom = document.getElementById("shapeName"),

    // App stuff
    spheres = [],
    colorSine = 0,
    planeWidth = 800,
    planeHeight = 800,
    mouseDown = false,
    mouseXSpeed = 0,
    mouseYSpeed = 0,
    speed = 0.02,

    // Shape vars
    currentShape,
    shapeIndex = 1,
    points = 200,
    frequency = 3,
    sine = 0,

    // THREE.JS
    renderer = new THREE.WebGLRenderer(),
    width = window.innerWidth,
    height = window.innerHeight,
    fov = 50,
    aspect = width / height,
    near = .1,
    far = 3000,
    camera = new THREE.PerspectiveCamera(fov, aspect, near, far),
    cameraDistance = 450,
    cameraRotationX = 0,
    cameraRotationY = 0.9,
    cameraRotationZ = 0,
    scene = new THREE.Scene();

// Initialization
window.onload = function () {
  let x, z,
      i = 0;

  // Setup renderer
  renderer.setClearColor(0x11212A, 1);
  renderer.shadowMap.enabled = true;
  renderer.shadowMap.type = THREE.PCFSoftShadowMap;
  renderer.setSize(width, height);
  container.style.width = width + "px";
  container.style.height = height + "px";
  container.appendChild(renderer.domElement);

  // Add spheres
  while (i++ < points) {
    let s = new THREE.Mesh(new THREE.SphereBufferGeometry(5, 6, 6), new THREE.MeshStandardMaterial());
    s.castShadow = true;
    spheres.push(s);
    scene.add(s);
  }

  const texture = new THREE.TextureLoader().load('https://4.bp.blogspot.com/-1_GBGKs2MmY/Wblkc-stQQI/AAAAAAAADag/rZelZjZydtoMDhbUMSl_2bRdSJ5otigaACLcBGAs/s1600/stonern01.jpg');
  texture.wrapS = THREE.RepeatWrapping;
  texture.wrapT = THREE.RepeatWrapping;
  texture.repeat.set(3, 3);

  const planeGeometry = new THREE.PlaneBufferGeometry(planeWidth, planeHeight);
  const planeMaterial = new THREE.MeshStandardMaterial({ roughness: 0.9, metalness: 1, map: texture });
  const plane = new THREE.Mesh(planeGeometry, planeMaterial);
  plane.receiveShadow = true;

  plane.position.set(0, -160, 0);
  plane.rotation.set(-Math.PI / 2, 0, 0);
  scene.add(plane);

  // Point light
  const pointLight = new THREE.PointLight(0xFFFFFF);
  scene.add(pointLight);

  // Directional light with shadow camera
  const light = new THREE.DirectionalLight(0xdfebff, 1.75);
  light.position.set(250, 400, 0);
  light.position.multiplyScalar(1.3);
  light.castShadow = true;
  //light.shadowCameraVisible = true;
  light.shadow.mapSize.width = 512;
  light.shadow.mapSize.height = 512;
  const d = 300;
  light.shadow.camera.left = -d;
  light.shadow.camera.right = d;
  light.shadow.camera.top = d;
  light.shadow.camera.bottom = -d;
  light.shadow.camera.far = 1400;
  scene.add(light);

  currentShape = Object.values(shapes)[shapeIndex];
  shapeName_dom.innerHTML = Object.keys(shapes)[shapeIndex].toUpperCase();

  // Start!
  loop();
}
function loop() {

  sine += speed;

  // Switch cursor to crosshair when mouse is down
  document.body.style.cursor = mouseDown ? "move" : "default";

  // Update the camera position
  camera.position.lerp(new THREE.Vector3(
    Math.cos(cameraRotationX) * cameraDistance,
    Math.cos(cameraRotationY) * cameraDistance,
    Math.sin(cameraRotationZ) * cameraDistance), .1
  );
  camera.lookAt(new THREE.Vector3(0, 0, 0));

  // Apply rotation to camera when mouse is pressed
  if (mouseDown) {
    cameraRotationX += mouseXSpeed / 100;
    cameraRotationY -= mouseYSpeed / 100;
    cameraRotationZ += mouseXSpeed / 100;
  }

  // Iterate through spheres, get desired positions and "lerp" to them
  spheres.forEach((sphere, i) => {
    sphere.position.lerp(currentShape(sphere, i, points), .04);
  });
  
  // Cycle colors
  colorSine += speed;

  // Render scene and request next frame
  renderer.render(scene, camera);
  requestAnimationFrame(loop);
}

const shapes = {
  ball: function (s, i, max) {
    let x, y, z,
        frac = i / max,
        scale = .9 + Math.sin(colorSine + frac * Math.PI * 3),
        amplitude = 20 + Math.sin(frac * Math.PI) * 90,
        color = new THREE.Color(
          .3,
          1 - Math.sin(colorSine + frac * 4 * Math.PI),
          1.0
        );

    s.scale.lerp(new THREE.Vector3(scale, scale, scale), 0.01);
    s.material.color.lerp(color, .03);

    x = Math.cos(sine + frac * 2 * Math.PI * frequency) * amplitude;
    y = Math.sin(sine + frac) * 150;
    z = Math.sin(sine + frac * 2 * Math.PI * frequency) * amplitude;
    return new THREE.Vector3(x, y, z);
  },
  loop: function (s, i, max) {
    let x, y, z,
        frac = i / max,
        amplitude = 40 + Math.sin(frac * Math.PI * 2) * 190,
        colorSpeed = colorSine * 6,
        color = new THREE.Color(
          Math.sin(colorSpeed + frac * 20 * Math.PI),
          Math.sin((Math.PI / 2) + colorSpeed + frac * 20 * Math.PI),
          Math.sin(Math.PI + colorSpeed + frac * 20 * Math.PI)
        );

    s.scale.lerp(new THREE.Vector3(1, 1, 1), 0.01);
    s.material.color.lerp(color, .1);

    x = Math.cos(sine + frac * 2 * Math.PI * frequency) * amplitude;
    y = Math.sin(sine + frac * 2 * Math.PI) * 150;
    z = Math.sin(sine + frac * 2 * Math.PI * frequency) * amplitude;
    
    return new THREE.Vector3(x, y, z);
  },
  snake: function (s, i, max) {
    let x, y, z,
        frac = i / max,
        scale = .2 + frac * 2,
        amplitudeY = 25 - Math.sin(frac * 2 * Math.PI) * 20,
        color = new THREE.Color(.8, Math.sin(frac * 20 * Math.PI), 0);

    s.scale.lerp(new THREE.Vector3(scale, scale, scale), 0.01);
    s.material.color.lerp(color, .03);

    x = Math.cos(sine + frac * 2 * Math.PI) * 150;
    y = amplitudeY - 155 + Math.sin(sine + frac * 2 * Math.PI * frequency) * amplitudeY;
    z = 250 - frac * 500;
    return new THREE.Vector3(x, y, z);
  },
  sun: function (s, i, max) {
    let x, y, z,
        frac = i / max,
        d = frac * 150,
        rotation = sine / 5;

    y = Math.sin(rotation + frac * Math.PI * 20) * d;
    z = Math.cos(rotation + frac * Math.PI * 20) * d;

    color = new THREE.Color(1, frac, 0);
    s.scale.lerp(new THREE.Vector3(1.5 - frac, 1.5 - frac, 1.5 - frac), 0.01);
    s.material.color.lerp(color, .1);

    return new THREE.Vector3(x, y, z);
  },
  clock: function(s, i, max) {
    let x, y, z, 
        scale = new THREE.Vector3(1, 1, 1),
        color = new THREE.Color(),
        twoPi = -2 * Math.PI,
        frac = i / max,
        date = new Date(),
        milliSeconds = date.getMilliseconds(),
        seconds = date.getSeconds(),
        secondsFrac = seconds / 60,
        minutes = date.getMinutes(),
        minutesFrac = minutes / 60,
        hours = date.getHours() + minutesFrac,
        hoursFrac = hours % 12 / 12;
    
    // Seconds
    if (i < 60) {
      const shFrac = i / 60;
      y = Math.cos(shFrac * twoPi) * 140;
      z = Math.sin(shFrac * twoPi) * 140;
      color = seconds === i
        ? new THREE.Color(1, 0, 0)
        : new THREE.Color(1, 1, 1);
      scale = i % 15 === 0 || seconds === i
        ? new THREE.Vector3(1.5, 1.5, 1.5)
        : new THREE.Vector3(0.5, 0.5, 0.5);
      
      if (Math.round((milliSeconds / 1000) * 60) === i) {
        s.material.color = new THREE.Color(0.1, 0.3, 0.7);
      }
    }
    // Minute hand
    else if (i >= 60 && i < 130) {
      const mi = i - 60;
      const mhFrac = mi / 69;
      y = Math.cos(minutesFrac * twoPi) * mhFrac * 125;
      z = Math.sin(minutesFrac * twoPi) * mhFrac * 125;
      scale = new THREE.Vector3(1.5, 1.5, 1.5);
      color = new THREE.Color(0.2, 0.2, 0.2);
    }
    // Hour hand
    else if (i >= 130 && i < points - 1) {
      const hi = i - 130;
      const hhFrac = hi / 69;
      y = Math.cos(hoursFrac * twoPi) * hhFrac * 100;
      z = Math.sin(hoursFrac * twoPi) * hhFrac * 100;
      scale = new THREE.Vector3(2.5, 2.5, 2.5);
      color = new THREE.Color(0.2, 0.2, 0.2);
    }
    // Center remaining points and make them red
    else {
      color = new THREE.Color(1, 0, 0);
      scale = new THREE.Vector3(5, 5, 5);
    }
    s.material.color.lerp(color, .03);
    s.scale.lerp(scale, 0.02);

    return new THREE.Vector3(x, y, z);
  },
  flag: function (s, i, max) {
    let x, y, z,
        row = Math.floor(i / 20),
        column = i - (row * 20),
        color = (row >= 4 && row < 6) || (column >= 6 && column < 8)
          ? new THREE.Color(0, 0, 1.0)
          : new THREE.Color(1.0, 1.0, 1.0),
        fx = Math.sin((sine * 3) + (column / 20) * frequency * Math.PI),
        fy = Math.sin(sine + (row / 20) * frequency * Math.PI);

    s.scale.lerp(new THREE.Vector3(1.5, 2, 2), 0.01);
    s.material.color.lerp(color, .03);

    x = fx * fy * 20;
    y = -row * 10;
    z = 100 - (i - (row * 20)) * 10;
    return new THREE.Vector3(x, y, z);
  },
};

function setShape(idx) {
  shapeIndex = idx;
  currentShape = Object.values(shapes)[idx];
  shapeName_dom.innerHTML = Object.keys(shapes)[idx].toUpperCase();
}

// Handle mouse and keyboard events
container.onwheel = function (e) {
  const speed = e.deltaY / 5;
  if (cameraDistance >= 100 && cameraDistance <= 1000) {
    cameraDistance = Math.max(Math.min(cameraDistance + speed, 1000), 100);
  }
};
container.onmousedown = function (e) {
  mouseDown = true;
};
window.onmouseup = function (e) {
  mouseDown = false;
  mouseXSpeed = mouseYSpeed = 0;
};
window.onmousemove = function (e) {
  if (mouseDown) {
    mouseXSpeed = e.movementX;
    mouseYSpeed = e.movementY;
  }
};
window.onkeyup = function (e) {
  const shapeCount = Object.keys(shapes).length;

  // Prevent page scroll with keys
  if (e.keyCode === 38 || e.keyCode === 40) e.preventDefault();

  // Left and right keys
  if (e.keyCode === 37) setShape(shapeIndex === 0 ? shapeCount - 1 : shapeIndex - 1);
  if (e.keyCode === 39) setShape(shapeIndex === shapeCount - 1 ? 0 : shapeIndex + 1);
};

function toggleInfo() {
  document.querySelector('#info').classList.toggle('visible');
}